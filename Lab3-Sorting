Exercise 1:
template <class T>
void SLinkedList<T>::bubbleSort() {
  // Check if the list is empty
  if (count == 0) {
    return;
  }

  // Bubble sort the list
  for (int i = 0; i < size() - 1; i++) {
    int a = 0;
    for (Node* current = head; current->next != nullptr; current = current->next) {
      if (current->data > current->next->data) {
          a++;
        // Swap the data of the two nodes
        T temp = current->data;
        current->data = current->next->data;
        current->next->data = temp;
      }
    }
    if (a!= 0) printList();
  }
}
Exercise 2:
template <class T>
void Sorting<T>::selectionSort(T *start, T *end)
{
    int size = end - start;
        for (int i = 0; i < size - 1; i++)
        {
            int min_idx = i;
            for (int j = i + 1; j < size; j++)
            {
                if (start[j] < start[min_idx])
                {
                    min_idx = j;
                }
            }
            if (min_idx != i)
            {
                swap(start[i], start[min_idx]);
            }
            printArray(start, end);
        }
    
}
Exercise 3:
static void sortSegment(T* start, T* end, int segment_idx, int cur_segment_total) {
    // TODO
    int size = end - start;
    for (int i = segment_idx + cur_segment_total; i < size; i = i + cur_segment_total){
        T temp = start[i];
        int j = i - cur_segment_total;
        for (; j >= segment_idx; j = j - cur_segment_total){
            if (temp < start[j]){
                start[j + cur_segment_total] = start[j];
            }
            else break;
        }
        start[j + cur_segment_total] = temp;
    }
}

static void ShellSort(T* start, T* end, int* num_segment_list, int num_phases) {
    // TODO
    // Note: You must print out the array after sorting segments to check whether your algorithm is true.
    for (int i = 0; i < num_phases; i++){
        for (int j = 0; j < num_segment_list[num_phases - 1 - i]; j++){
            sortSegment(start, end, j, num_segment_list[num_phases - 1 - i]);
        }
        cout<<num_segment_list[num_phases - 1 - i]<<" segments: ";
        printArray(start, end);
    }
}
Exercise 4:
static T* Partition(T* start, T* end) {
        T* pivot = start;
        T* left = start + 1;
        T* right = end - 1;
        while (true) {
            while (left <= right && *left <= *pivot) {
                left++;
            }
            while (left <= right && *right >= *pivot) {
                right--;
            }
            if (left > right) {
                break;
            }
            swap(*left, *right);
        }
        swap(*pivot, *right);
        return right;
    }
static void QuickSort(T* start, T* end) {
        if (start < end) {
            T* pivot = Partition(start, end);
            cout << pivot - start << " ";
            QuickSort(start, pivot);
            QuickSort(pivot + 1, end);
        }
    }
Exercise 5:
static void merge(T* left, T* middle, T* right){
    /*TODO*/
    int l=middle-left+1;
    int r=right-middle;
    T L[l], R[r];
    for (int i=0; i<l; i++){
        L[i]=left[i];
    }
    for (int i=0; i<r; i++){
        R[i]=middle[i+1];
    }
    int i=0, j=0, k=0;
    while (i<l&&j<r){
        if (L[i]<=R[j]) {
            left[k]=L[i];
            i++;
            k++;
        }
        else {
            left[k]=R[j];
            j++;
            k++;
        }
    }
    while (i<l){
        left[k]=L[i];
        i++;
        k++;
    }
    while (j<r){
        left[k]=R[j];
        j++;
        k++;
    }
    Sorting::printArray(left, right);
}
static void mergeSort(T* start, T* end){
    /*TODO*/
    if (start>=end) return;
    T* mid=start+(end-start)/2;
    mergeSort(start, mid);
    mergeSort(mid+1, end);
    merge(start,mid,end);
}
Exercise 6:
// You must use the nodes in the original list and must not modify ListNode's val attribute. 
// Hint: You should complete the function mergeLists first and validate it using our first testcase example

// Merge two sorted lists
ListNode* mergeLists(ListNode* a, ListNode* b) {
    if (a==nullptr&&b==nullptr) return nullptr;
    if (a==nullptr) return b;
    if (b==nullptr) return a;
    ListNode* tempa=a;
    ListNode* tempb=b;
    ListNode* head=nullptr;
    ListNode* tail=nullptr;
    while(tempa!=nullptr&&tempb!=nullptr){
        if (tempa->val<=tempb->val){
            if (head==nullptr) {
                ListNode* tmp=tempa;
                tempa=tempa->next;
                tmp->next=nullptr;
                head=tail=tmp;
            }
            else {
                ListNode* tmp=tempa;
                tempa=tempa->next;
                tmp->next=nullptr;
                tail->next=tmp;
                tail=tmp;
            }
        }
        else{
            if (head==nullptr) {
                ListNode* tmp=tempb;
                tempb=tempb->next;
                tmp->next=nullptr;
                head=tail=tmp;
            }
            else {
                ListNode* tmp=tempb;
                tempb=tempb->next;
                tmp->next=nullptr;
                tail->next=tmp;
                tail=tmp;
            }
        }
    }
    while (tempa!=nullptr){
        if (head==nullptr) {
            ListNode* tmp=tempa;
            tempa=tempa->next;
            tmp->next=nullptr;
            head=tail=tmp;
        }
        else {
            ListNode* tmp=tempa;
            tempa=tempa->next;
            tmp->next=nullptr;
            tail->next=tmp;
            tail=tmp;
        }
    }
    while (tempb!=nullptr){
        if (head==nullptr) {
            ListNode* tmp=tempb;
            tempb=tempb->next;
            tmp->next=nullptr;
            head=tail=tmp;
        }
        else {
            ListNode* tmp=tempb;
            tempb=tempb->next;
            tmp->next=nullptr;
            tail->next=tmp;
            tail=tmp;
        }
    }
    return head;
}

// Sort and unsorted list given its head pointer
ListNode* mergeSortList(ListNode* head) {
    if (head==nullptr||head->next==nullptr) return head;
    ListNode*temp=head;
    int count=0;
    while (temp!=nullptr){
        temp=temp->next;
        count++;
    }
    temp=head;
    for (int i=0; i<count/2-1; i++){
        temp=temp->next;
    }
    ListNode* tmp=temp->next;
    temp->next=nullptr;
    ListNode* a=mergeSortList(head);
    ListNode*b=mergeSortList(tmp);
    ListNode*c=mergeLists(a,b);
    return c;
}
Exercise 7:
static void merge(T* start, T* middle, T* end){
    int n1=middle-start+1;
    int n2=end-middle;
    int i=0, j=0, k=0;
    T L[n1], R[n2];
    for (int i=0; i<n1; i++){
        L[i]=start[i];
    }
    for (int i=0; i<n2; i++){
        R[i]=middle[i+1];
    }
    while (i<n1&&j<n2){
        if (L[i]<=R[j]){
            start[k]=L[i];
            i++;
            k++;
        }
        else {
            start[k]=R[j];
            j++;
            k++;
        }
    }
    while (i<n1){
        start[k]=L[i];
        i++;
        k++;
    }
    while (j<n2){
        start[k]=R[j];
        j++;
        k++;
    }
}
static void InsertionSort(T* start, T* end){
    int n=end-start;
    int curr=1;
    while (curr<n){
        int tmp=start[curr];
        int step=curr-1;
        while (step>=0&&tmp<start[step]){
            start[step+1]=start[step];
            step--;
        }
        start[step+1]=tmp;
        curr++;
    }
}
static void TimSort(T* start, T* end, int min_size){
    int size=end-start;
    int i=0;
    while (i+min_size<size){
        InsertionSort(start+i, start+i+min_size);
        i+=min_size;
    }
    InsertionSort(start+i, end);
    cout<<"Insertion Sort: "; printArray(start, end);
    
    i=min_size;
    int count=1;
    while (i<size){
        int left=0;
        while (left<size){
        int mid=min(left+i-1,size-1);
        int right=min(left+2*i-1, size-1);
        merge(start+left, start+mid, start+right);
        cout<<"Merge "<<count<<": "; printArray(start, end);
        count++;
        left+=2*i;
    }
    i*=2;
    }
}
Exercise 8:
int maxNumberOfPeople(vector<int>& rooms, vector<int>& people, int k) {
    sort(&rooms[0],&rooms[rooms.size()]);
    sort(&people[0], &people[people.size()]);
    int i=0, j=0, count=0;
    while (i<rooms.size()&&j<people.size()){
        if (people[j]<rooms[i]-k) j++;
        else if (people[j]>rooms[i]+k) i++;
        else {
            i++;
            j++;
            count++;
        }
    }
    return count;
}
Exercise 9:
string minDiffPairs(int* arr, int n){
    // STUDENT ANSWER
    std::sort(&arr[0], &arr[n]);
    int m=arr[1]-arr[0];
    int index=0;
    for (int i=1; i<n-1; i++){
        if (arr[i+1]-arr[i]<m){
            m=arr[i+1]-arr[i];
            index=i;
        }
    }
    string s="";
    if (n==1) return s;
    s=s+"("+to_string(arr[index])+", "+to_string(arr[index+1])+")";
    for (int i=index+1; i<n-1; i++){
        if (arr[i+1]-arr[i]==m){
            s=s+", ("+to_string(arr[i])+", "+to_string(arr[i+1])+")";
        }
    }
    return s;
}
Exercise 10:
struct Frequency{
    int element;
    int f;
    int index;
};
bool compare(Frequency a, Frequency b){
    //so sanh uu tien tan so hon index
    if (a.f!=b.f) return (a.f>b.f);
    else return (a.index<b.index);
}
void sortByFrequency(int arr[], int n){
    vector<Frequency> A(n);
    //khoi tao mang kieu Frequency voi tan so ban dau la 0
    for (int i=0; i<n; i++){
        A[i].element=arr[i];
        A[i].f=0;
        A[i].index=i;
    }
    // tinh tan so tung phan tu
    for (int i=0; i<n; i++){
        for (int j=0; j<n; j++){
            if (arr[j]==A[i].element) A[i].f++;
        }
    }
    
    std::sort(A.begin(), A.end(), compare);
    //
    int i;
    bool flag=false;
    //mang moi voi cac phan tu dau
    for (i=0; i<A[0].f; i++){
        arr[i]=A[0].element;
    }
    //kiem tra neu da xuat hien o truoc (flag=true) thi bo qua
    //neu chua xuat hien thi in theo tan so
    //reset flag;
    for (int j=1; j<n; j++){
        for (int k=0; k<j; k++){
            if (A[j].element==A[k].element){
                flag=true;
                break;
            }
        }
        if (flag==false){
            for (int m=0; m<A[j].f; m++){
                arr[i]=A[j].element;
                i++;
            }
        }
        flag=false;
    }
}
Exercise 11:
bool comparePoints(const pair<Point, double>& a, const pair<Point, double>& b) {
    return a.second < b.second;
}

void closestKPoints(Point points[], int n, Point& des_point, int k) {
    vector<pair<Point, double>> distances;
    for (int i = 0; i < n; i++) {
        double distance = sqrt(pow(points[i].x - des_point.x, 2) + pow(points[i].y - des_point.y, 2));
        distances.push_back(make_pair(points[i], distance));
    }
    sort(distances.begin(), distances.end(), comparePoints);

    for (int i = 0; i < k && i < n; i++) {
        distances[i].first.display();
        cout << endl;
    }
}
